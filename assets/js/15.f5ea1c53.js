(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{411:function(t,a,e){"use strict";e.r(a);var s=e(26),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-使用笔记"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-使用笔记"}},[t._v("#")]),t._v(" git 使用笔记")]),t._v(" "),e("h2",{attrs:{id:"合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并分支"}},[t._v("#")]),t._v(" 合并分支")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git merge --no-ff ...：不使用fast-forward方式合并，保留分支的commit历史\n")])])]),e("h2",{attrs:{id:"删除分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#删除分支"}},[t._v("#")]),t._v(" 删除分支")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("删除远程分支：git push origin :远程分支名\n删除本地分支：git branch -d 本地分支名\n")])])]),e("h2",{attrs:{id:"清除远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#清除远程分支"}},[t._v("#")]),t._v(" 清除远程分支")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git远程删除分支后，本地git branch -a 依然能看到的解决办法：git remote prune origin\n")])])]),e("h2",{attrs:{id:"更改-git-仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#更改-git-仓库"}},[t._v("#")]),t._v(" 更改 git 仓库")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git remote set-url origin 新地址\n")])])]),e("h2",{attrs:{id:"从别人-github-地址上通过-git-clone-下载下来-push-到自己仓库"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#从别人-github-地址上通过-git-clone-下载下来-push-到自己仓库"}},[t._v("#")]),t._v(" 从别人 github 地址上通过 git clone 下载下来, push 到自己仓库")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("git rm -r --cached .\ngit config core.autocrlf false\ngit add .\n")])])]),e("h2",{attrs:{id:"回滚代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回滚代码"}},[t._v("#")]),t._v(" 回滚代码")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("处理回滚的开发\ngit reset --hard commit {commitId}\ngit push --force origin {branchName}\n\n其他小伙伴本地\ngit reset --hard origin {branchName}\ngit pull origin {branchName}\n")])])]),e("h2",{attrs:{id:"子模块-submoudle"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子模块-submoudle"}},[t._v("#")]),t._v(" 子模块 submoudle")]),t._v(" "),e("div",{staticClass:"language-git extra-class"},[e("pre",{pre:!0,attrs:{class:"language-git"}},[e("code",[t._v("首次克隆仓库及其模块\ngit clone --recursive 仓库地址\n\n仓库首次拉取模块\ngit submodule update --init --recursive\n\n更新子模块\n1.8.2\ngit submodule update --recursive --remote\n\n1.7.3\ngit submodule update --recursive\n\n或者\ngit pull --recurse-submodules\n\ngit clone –recursive 递归的方式克隆整个项目\ngit submodule add 添加子模块\ngit submodule init 初始化子模块\ngit submodule update 更新子模块\ngit submodule foreach git pull 拉取所有子模块\ngit checkout --recurse-submodules\ngit config submodule.recurse true\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);