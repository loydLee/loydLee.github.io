(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{386:function(s,t,a){"use strict";a.r(t);var n=a(26),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"前端笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端笔记"}},[s._v("#")]),s._v(" 前端笔记")]),s._v(" "),a("h2",{attrs:{id:"xml-与-json-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xml-与-json-的区别"}},[s._v("#")]),s._v(" XML 与 JSON 的区别")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、数据体积方面\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),s._v("相对于"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XML")]),s._v("来说，数据的体积小，传递的速度更快些\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、数据交互方面\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),s._v("与javascript的交互更加方便，更容易解析处理，更好的数据交互\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、数据描述方面\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),s._v("对数据的描述性比"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XML")]),s._v("较差\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、传输速度方面\n   "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSON")]),s._v("的速度远远快于"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("XML")]),s._v("\n")])])]),a("h2",{attrs:{id:"如何解决跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何解决跨域问题"}},[s._v("#")]),s._v(" 如何解决跨域问题")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JSONP")]),s._v("\n   原理：动态插入script标签，通过script标签引入一个js文件，这个js文件载入成功后会执行我们在url参数中指定的函数，并且会把我们需要的json数据作为参数传入\n   优点是兼容性好，简单易用，支持浏览器与服务器双向通信，缺点为只支持"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("get")]),s._v("请求\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、cros\n   服务器端对于"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CORS")]),s._v("的支持，主要就是通过设置Access"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Control"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Allow"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("Origin来进行的。如果浏览器检测到相应的设置，就可以允许Ajax进行跨域的访问\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、通过修改document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("domain来跨子域\n   将子域和主域的document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("domain设为同一个主域"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("前提条件：这两个域名必须属于同一个基础域名"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("而且所用的协议，端口都要一致，否则无法利用document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("domain进行跨域\n   主域相同的使用document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("domain\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、使用window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name来进行跨域\n   "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("window对象有个name属性，该属性有个特征：即在一个窗口")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("的生命周期内"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("窗口载入的所有的页面都是共享一个window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name的，每个页面对window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name都有读写的权限，window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name是持久存在一个窗口载入过的所有页面中的\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、使用"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML5")]),s._v("中新引进的window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("postMessage方法来跨域传送数据\n\n   除此之外，还有flash，，在服务器上这是代理页面等跨域方式，其中，window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name的方法既不复杂，又能兼容到所有的浏览器。"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("推荐使用"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("\n")])])]),a("h2",{attrs:{id:"webpack-的两大特色"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack-的两大特色"}},[s._v("#")]),s._v(" webpack 的两大特色")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、code "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("splitting")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("可以自动完成"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、loader可以处理各种类型的静态文件，并且支持串联操作\n")])])]),a("p",[s._v("webpack 具有 requirejs 以及 browserify 的功能，但是还有很多自己的特性")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、对commonjs、amd、es6的语法做了兼容\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、对js、css、图片等资源文件都支持打包\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" 串联式模块加载器以及插件机制，让其具有更好的灵活性和扩展性，例如提供对CoffeeScript、"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ES6")]),s._v("的支持\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" 有独立的配置文件webpack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("config"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("js\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v(" 可以将代码切割成不同的chunk，实现按需加载，降低了初始化时间\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v(" 支持 SourceUrls 和 SourceMaps，易于调试\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v(" 具有强大的Plugin接口，大多是内部插件，使用起来比较灵活\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),s._v("webpack 使用异步 "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IO")]),s._v(" 并具有多级缓存。这使得 webpack 很快且在增量编译上更加快\n")])])]),a("h2",{attrs:{id:"tcp-传输的三次握手四次挥手策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-传输的三次握手四次挥手策略"}},[s._v("#")]),s._v(" TCP 传输的三次握手四次挥手策略")]),s._v(" "),a("h3",{attrs:{id:"三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[s._v("#")]),s._v(" 三次握手")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("为了准确无误地把数据送达目标处，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("协议采用了三次握手策略。用"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("协议把数据包送出去后，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("不会对传送 后的情况置之不理，它一定会向对方确认是否成功送达。握手过程中使用了"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("的标志："),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v("和"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("。\n\n发送端首先发送一个带"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v("标志的数据包给对方。接收端收到后，回传一个带有"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("标志的数据包以示传达确认信息。\n最后，发送端再回传一个带"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("标志的数据包，代表“握手”结束。\n若在握手过程中某个阶段莫名中断，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("协议会再次以相同的顺序发送相同的数据包。\n")])])]),a("h3",{attrs:{id:"四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[s._v("#")]),s._v(" 四次挥手")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("第一次挥手：主动关闭方发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v("，用来关闭主动方到被动关闭方的数据传送，也就是主动关闭方告诉被动关闭方：我已经不 "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("会再给你发数据了")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("当然，在fin包之前发送出去的数据，如果没有收到对应的ack确认报文，主动关闭方依然会重发这些数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，但是，此时主动关闭方还可 以接受数据。\n\n第二次挥手：被动关闭方收到"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v("包后，发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("给对方，确认序号为收到序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("（与"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SYN")]),s._v("相同，一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v("占用一个序号）。\n\n第三次挥手：被动关闭方发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v("，用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会再给你发数据了。\n\n第四次挥手：主动关闭方收到"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("FIN")]),s._v("后，发送一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("ACK")]),s._v("给被动关闭方，确认序号为收到序号"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，至此，完成四次挥手。\n")])])]),a("h2",{attrs:{id:"tcp-与-udp-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-与-udp-的区别"}},[s._v("#")]),s._v(" TCP 与 UDP 的区别")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("（Transmission Control Protocol，传输控制协议）是基于连接的协议，也就是说，在正式收发数据前，必须和对方建立可靠的连接。一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("连接必须要经过三次“对话”才能建立起来\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("（User Data Protocol，用户数据报协议）是与"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("相对应的协议。它是面向非连接的协议，它不与对方建立连接，而是直接就把数据包发送过去！\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("UDP")]),s._v("适用于一次只传送少量数据、对可靠性要求不高的应用环境。\n")])])]),a("h2",{attrs:{id:"作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[s._v("#")]),s._v(" 作用域链")]),s._v(" "),a("p",[s._v("作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到 window 对象即被终止，作用域链向下访问变量是不被允许的")]),s._v(" "),a("h2",{attrs:{id:"原生创建-ajax-的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原生创建-ajax-的过程"}},[s._v("#")]),s._v(" 原生创建 ajax 的过程")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、创建XMLHttpRequest对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("也就是创建一个异步调用对象"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、创建一个新的"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("请求"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("并指定该"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("请求的方法、"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("URL")]),s._v("及验证信息"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、设置响应"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("请求状态变化的函数"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、发送"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("请求"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、获取异步调用返回的数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("、使用JavaScript和"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("实现局部刷新"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])])]),a("h2",{attrs:{id:"渐进增强与优雅降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渐进增强与优雅降级"}},[s._v("#")]),s._v(" 渐进增强与优雅降级")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。\n\n优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。\n")])])]),a("h2",{attrs:{id:"常见-web-安全以及防护原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见-web-安全以及防护原理"}},[s._v("#")]),s._v(" 常见 web 安全以及防护原理")]),s._v(" "),a("h3",{attrs:{id:"sql-注入"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-注入"}},[s._v("#")]),s._v(" sql 注入")]),s._v(" "),a("p",[s._v("通过 sql 命令把表单提交到或输入域名或页面请求的查询字符串，以达到欺骗服务器执行恶意的 sql 命令\n总体如下:")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-"')]),s._v("进行转换等。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("永远不要使用动态拼装"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SQL")]),s._v("，可以使用参数化的"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SQL")]),s._v("或者直接使用存储过程进行数据查询存取。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("不要把机密信息明文存放，请加密或者hash掉密码和敏感的信息。\n")])])]),a("h3",{attrs:{id:"xss-原理及防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-原理及防范"}},[s._v("#")]),s._v(" XSS 原理及防范")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Xss")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cross"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("site scripting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("攻击指的是攻击者往web页面里插入恶意html或者javascript代码，比如：攻击者在论坛中放一个看似安全的链接，片区用户点击后，窃取cookie的用户私密信息，或者攻击者在了论坛中加一个恶意表单；\n当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点。\n\n防范方法"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n        首先代码里对用户输入的地方和变量都需要仔细检查长度和对”"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("”"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("”"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("”’”等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心吧hrml tag弄出来\n        然而，避免直接在cookie中泄露用户隐私，例如email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("密码等等\n        其次，通过cookie和系统ip绑定来降低cookie泄露后的危险，这样攻击者得到的cookie没有实际价值，如果网站不需要在浏览器端对cookie进行操作，可以在set"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("cookie末尾加上httponly来防止javascript代码直接获取cookie\n")])])]),a("h3",{attrs:{id:"xss-与-csrf-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xss-与-csrf-区别"}},[s._v("#")]),s._v(" XSS 与 CSRF 区别")]),s._v(" "),a("p",[s._v("XSS 是获取信息，不需要提前知道其他用户页面的代码和数据包。CSRF 是代替用户完成指定的动作，需要知道 ITA 用户页面的代码和数据包，而要完成一次 CSRF 攻击，受害者必须一次完成两个步骤:")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("登录受信任网站"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("，并在本地生成cookie\n在不登出"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("A")]),s._v("的情况下，访问危险网站"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("B")]),s._v("\n")])])]),a("p",[s._v("CSRF 的防御：服务端的 CSRF 方法有很多，思路一致：在客户端页面增加伪随机数")]),s._v(" "),a("h3",{attrs:{id:"通过验证码的方法进行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过验证码的方法进行"}},[s._v("#")]),s._v(" 通过验证码的方法进行")]),s._v(" "),a("p",[s._v("web worker 和 websocket")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("worker主线程：\n            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("通过 worker "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Worker")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" url "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 加载一个"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("JS")]),s._v("文件来创建一个worker，同时返回一个worker实例。\n\n            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v("通过worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("postMessage")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" data "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 方法来向worker发送数据。\n\n            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v("绑定worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("onmessage方法来接收worker发送过来的数据。\n\n            "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v("可以使用 worker"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("terminate")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" 来终止一个worker的执行。\nwebsocket是web应用程序的传输协议，它提供了双向的，按序到达的数据流，其次，它是一个html5协议，websocket的链接是持久的，通过在客户端和服务器之间保持双工链接，服务器的更新可以被及时推送给客户端，而不需要客户端以一定时间间隔去轮询\n")])])]),a("h3",{attrs:{id:"http-与-https"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-与-https"}},[s._v("#")]),s._v(" HTTP 与 HTTPS")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("协议通常承载于"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("协议之上，在"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("和"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TCP")]),s._v("之间添加一个安全协议层（"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("SSL")]),s._v("或"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TSL")]),s._v("），这个时候，就成了"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v("。\n\n默认"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),s._v("的端口号为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v("，"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v("的端口号为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v("。\n\n为什么"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v("安全\n\n因为网络请求需要中间有很多的服务器路由器的转发。中间的节点都可能篡改信息，而如果使用"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTPS")]),s._v("，密钥在你和终点站才有。https之所以比http安全，是因为他利用ssl"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("tls协议传输。它包含证书，卸载，流量转发，负载均衡，页面适配，浏览器适配，refer传递等。保障了传输过程的安全性\n")])])]),a("h2",{attrs:{id:"对前端模块化的认识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对前端模块化的认识"}},[s._v("#")]),s._v(" 对前端模块化的认识")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AMD")]),s._v("是requirejs在推广过程中对模块定义的规范化中产出，它是提前执行，推荐的风格是返回一个对象作为模块对象\nCommonjs是seajs在推广过程中对模块定的的规范化中产出，它是延迟执行，commonjs的风格通过对module，exports或exports的属性复制来达到暴露模块对象的目的\n")])])]),a("h2",{attrs:{id:"javascript-的垃圾回收方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-的垃圾回收方法"}},[s._v("#")]),s._v(" javascript 的垃圾回收方法")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("标记清除")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mark and sweep"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("javascript最常见的垃圾回收，当变量进入执行环境的时候，比如函数中声明一个变量，垃圾回收器将其标记为‘进入环境’，当变量离开环境的时候")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("函数执行结束"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("将其标记为‘离开环境’\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("闭包"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，在这些完成之后仍存在标记的就是要删除的变量\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("引用计数")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("reference counting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    在低版本"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IE")]),s._v("中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，如果该变量的值变成了另外一个，则这个值得引用次数减"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("，当这个值的引用次数变为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("的值占用的空间。\n\n    在"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("IE")]),s._v("中虽然JavaScript对象通过标记清除的方式进行垃圾回收，但"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BOM")]),s._v("与"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("对象却是通过引用计数回收垃圾的，\n    也就是说只要涉及"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("BOM")]),s._v("及"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("就会出现循环引用问题。\n")])])]),a("h2",{attrs:{id:"性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[s._v("#")]),s._v(" 性能优化")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("代码层面优化\n    用hash"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("table来优化查找\n    少用全局变量\n    用innerHTML代替"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("操作，减少"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("操作次数，优化javascript性能\n    用setTimeout避免页面失去响应\n    缓存"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("DOM")]),s._v("节点查找结果\n    避免使用css expression\n    避免全局查询\n    避免使用"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v("会创建自己的作用域，会增加作用域链长度"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    多个变量声明合并\n    避免图片和iFrame等的空Src。空Src会重新加载当前页面，影响速度和效率\n    尽量避免写在"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTML")]),s._v("标签中写Style属性\n\n移动端性能优化\n    尽量使用css3动画，开启硬件加速。\n    适当使用touch事件代替click事件。\n    避免使用css3渐变阴影效果。\n    可以用transform"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("translateZ")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("来开启硬件加速。\n    不滥用Float。Float在渲染时计算量比较大，尽量减少使用\n    不滥用Web字体。Web字体需要下载，解析，重绘当前页面，尽量减少使用。\n    合理使用requestAnimationFrame动画代替setTimeout\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS")]),s._v("中的属性（"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS3")]),s._v(" transitions、"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("CSS3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("D     transforms、Opacity、Canvas、WebGL、Video）会触发"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("GPU")]),s._v("渲染，请合理使用。过渡使用会引发手机过耗电增加\n    "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PC")]),s._v("端的在移动端同样适用\n")])])]),a("h2",{attrs:{id:"js-继承方式及其优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-继承方式及其优缺点"}},[s._v("#")]),s._v(" js 继承方式及其优缺点")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("原型链继承的缺点"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    意识字面量重写原型绘中断关系，使用引用类型的原型，并且子类型还无法给超类型传递参数\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("借用构造函数")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("类式继承"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    借用构造函数虽然解决了刚才两种问题，但没有原型，则复用无从谈起，因此需要原型链"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("借用构造函数的模式"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("组合继承\n    这是一种比较常见的继承方法，背后的思路是使用原型链实现对原型属性和方法的继承\n")])])]),a("h2",{attrs:{id:"http-2-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-2-0"}},[s._v("#")]),s._v(" HTTP 2.0")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("引入了“服务端推（server push）”的概念，它允许服务端在客户端需要数据之前就主动地将数据发送到客户端缓存中，从而提高性能。\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("提供更多的加密支持\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("使用多路技术，允许多个消息在一个连接上同事交差\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("增加了头压缩")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("header compression"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("因此即使非常小的请求，其请求和响应的header都只会占用很小比例的带宽\n")])])]),a("h2",{attrs:{id:"defer-与-async"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#defer-与-async"}},[s._v("#")]),s._v(" defer 与 async")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("defer并行加载js文件，会按照页面上script标签的顺序执行\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("async")]),s._v("并行加载js文件，下载完成立即执行，不会按照页面上script标签的顺序执行\n")])])]),a("h2",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[s._v("#")]),s._v(" 设计模式")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("工厂模式\n    主要好处：可以消除对象间的耦合，通过使用工程方法而不是"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v("关键字，将所有实例化的代码集中在一个位置防止代码重复\n    工厂模式解决了重复实例化的问题，但存在识别问题：无法弄清楚他们到底是哪一个对象的实例\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("profession")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//集中实例化的函数var obj = new Object();")]),s._v("\n        obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("profession "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" profession"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("move")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' at '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("' engaged in '")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("profession"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" test1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createObject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'trigkit4'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("22")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'programmer'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//第一个实例var test2 = createObject('mike',25,'engineer');//第二个实例")]),s._v("\n\n构造函数模式\n    使用构造函数的方法，即解决了重复实例化的问题，有解决了对象识别的 问题，该模式与工厂模式的不同之处在于：\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("、构造函数方法没有显示的创建对象")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、直接将属性和方法赋值给"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),s._v("对象\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、没有"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v("\n")])])]),a("h2",{attrs:{id:"对闭包的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对闭包的理解"}},[s._v("#")]),s._v(" 对闭包的理解")]),s._v(" "),a("p",[s._v("使用闭包主要是为了设计私有的变量和方法，闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露，在 js 中，函数即闭包，只有函数才会产生作用域的概念")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("闭包有三个特性\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、函数嵌套函数\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、函数内部可以引用外部的参数和变量\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、参数和变量不会被垃圾回收机制回收\n")])])]),a("h2",{attrs:{id:"cookie-的弊端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的弊端"}},[s._v("#")]),s._v(" cookie 的弊端")])])}),[],!1,null,null,null);t.default=e.exports}}]);