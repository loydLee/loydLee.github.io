(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{405:function(t,a,s){"use strict";s.r(a);var n=s(26),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"算法之时间复杂度、空间复杂度计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#算法之时间复杂度、空间复杂度计算"}},[t._v("#")]),t._v(" 算法之时间复杂度、空间复杂度计算")]),t._v(" "),s("h2",{attrs:{id:"时间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),s("p",[t._v("通用方法：「大O符号表示法」(算法的渐进时间复杂度)，即 T(n) = O(f(n))，其中f(n)表示每行代码执行次数之和，O表示正比例关系,她表示的并不是算法的真实执行时间，而是代码执行时间的增长变化趋势")]),t._v(" "),s("p",[t._v("一个简单的例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("假定每行代码的执行时间一样，用1颗粒时间来进行表示，那么这个例子执行的时间就是 (1+2n) * 颗粒时间,即： T(n)=(1+2n) * 颗粒时间，也就是说这个算法的耗时是随n变化而变化的，因此简化一下就是\nT(n)=O（n）")]),t._v(" "),s("p",[t._v("常见的事件复杂度量级有：")]),t._v(" "),s("ul",[s("li",[t._v("常数阶O(1)")]),t._v(" "),s("li",[t._v("对数阶O(logN)")]),t._v(" "),s("li",[t._v("线性阶O(n)")]),t._v(" "),s("li",[t._v("线性对数阶O(nlogN)")]),t._v(" "),s("li",[t._v("平方阶O(n²)")]),t._v(" "),s("li",[t._v("立方阶O(n³)")]),t._v(" "),s("li",[t._v("K次方阶O(n^k)")]),t._v(" "),s("li",[t._v("指数阶(2^n)")])]),t._v(" "),s("h3",{attrs:{id:"常数阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常数阶"}},[t._v("#")]),t._v(" 常数阶")]),t._v(" "),s("p",[t._v("无论代码执行多少行，只要没有循环登复杂结构，那么这个代码的时间复杂度就都是O(1)")]),t._v(" "),s("h3",{attrs:{id:"线性阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性阶"}},[t._v("#")]),t._v(" 线性阶")]),t._v(" "),s("p",[t._v("比如for循环，消耗事件随着n的变化而变化-> O(n)")]),t._v(" "),s("h3",{attrs:{id:"对数阶o-logn"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对数阶o-logn"}},[t._v("#")]),t._v(" 对数阶O(logN)")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("int i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在这个循环中，每次i都乘以2，乘完之后，i距离n越来越近，也就是说2的x次方等于n，那么x=log2^n -> 时间复杂度为：O（logN)")]),t._v(" "),s("h3",{attrs:{id:"线性对数阶"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性对数阶"}},[t._v("#")]),t._v(" 线性对数阶")]),t._v(" "),s("p",[t._v("把对数阶循环n次，时间复杂度就是n*O(logN),也就是O(nlogN)")]),t._v(" "),s("h3",{attrs:{id:"平方阶、立方阶-n层循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平方阶、立方阶-n层循环"}},[t._v("#")]),t._v(" 平方阶、立方阶...n层循环")]),t._v(" "),s("h2",{attrs:{id:"空间复杂度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[t._v("#")]),t._v(" 空间复杂度")]),t._v(" "),s("p",[t._v("时间复杂度不是用来计算程序实际具体耗时，与之对应，空间复杂度也不是用来计算程序实际占用空间的")]),t._v(" "),s("p",[t._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。")]),t._v(" "),s("h2",{attrs:{id:"o-1"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#o-1"}},[t._v("#")]),t._v(" O(1)")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("int i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nj"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nint m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码中的i、j所分配的空间不随着处理数据量的变化而变化 -> 空间复杂度 S(n) = O(1)")]),t._v("\n")])])]),s("h2",{attrs:{id:"o-n"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#o-n"}},[t._v("#")]),t._v(" O(n)")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("int"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" m "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   j "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一行new了一个数组出来，这个数据占用大小为n，后续代码并没有再分配新的空间，因此这个复杂度为 S(n) = O(n)")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);