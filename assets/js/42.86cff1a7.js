(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{393:function(a,e,t){"use strict";t.r(e);var r=t(26),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"vue学习笔记"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue学习笔记"}},[a._v("#")]),a._v(" vue学习笔记")]),a._v(" "),t("h2",{attrs:{id:"router配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#router配置"}},[a._v("#")]),a._v(" router配置")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    export default new Router({\n      routes: [{\n        path: '/',\n        name: 'Hello',\n        component: Hello,\n        children: [{\n          path: 'test',\n          name: 'test',\n          component: test\n        }]\n      }\n    ]\n})\n")])])]),t("h2",{attrs:{id:"组件传值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件传值"}},[a._v("#")]),a._v(" 组件传值")]),a._v(" "),t("p",[a._v("父子：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    静态：父子传递的时候，如果只需要传递一个静态的字符串之类的内容，不需要加：\n    动态：如果父子传值的时候，传递的是data里面的一个动态值，就需要加上：；其次，\t\t\t              \n    这种情况下，如果父组件里面的内容产生了改变，子组件接收到的内容也会发生变化\n    注意：㘝需要传递一个number不能使用静态的方式，因为会被处理成字符串，此时需要\n    使用v-bind\n      ● prop 作为初始值传入后，子组件想把它当作局部数据来用:\n    解决方式：  定义一个局部变量，并用 prop 的值初始化它：\n    props: ['initialCounter'],\n    data: function () {\n      return { counter: this.initialCounter }\n    }\n      ● prop 作为初始值传入，由子组件处理成其它数据输出。\n    解决方式：  定义一个计算属性，处理 prop 的值并返回：\n    props: ['size'],\n    computed: {\n      normalizedSize: function () {\n        return this.size.trim().toLowerCase()\n      }\n    }\n    注意：在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它会影响父组件的状态。\n")])])]),t("p",[a._v("子-父：自定义事件")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("    使用 $on(eventName) 监听事件\n    使用 $emit(eventName) 触发事件\n    做法一：子组件触发自身内部内容的时候，通过$emit报告上去，父组价通过绑定在子组件上的on...联动触发自身事件\n    做法二：父组件绑定数据的时候加上sync修饰符，子组件修改数据的时候通过this.$emit('update:value',newvalue)显式地报告上去\n")])])]),t("h2",{attrs:{id:"vue-router-params与query区别、"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-router-params与query区别、"}},[a._v("#")]),a._v(" vue-router params与query区别、")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("最表面的区别在于：params在url上显示的为直接的value值\nhttp://localhost:8080/goods/list/online/5997a550b0e2bb1403537a3e/check/true\\\n而query在url显示的是key+value的形式\nhttp://localhost:8080/goods/template/view?templateId=5997ae3db54ee41447257625\n\n其次params需要在路由的时候进行注册，这样我们才知道this.$route.params.???来取得对应的值，而query不需要进行显式注册，因为我们能够在url里面看到直接的key值，根据这个值，我们便能对应拿到想要的数据    \n\n编写方式：\nparams:\nthis.$router.push({name: 'goodsOnline', params: {productId: row._id, operate: 'check', hasBiz: row.hasBiz}})\nquery:\nthis.$router.push({name: 'goodsTemplateView', query: {templateId: id}})\n")])])]),t("h2",{attrs:{id:"webpack打包过程-导致字体图标缺失"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack打包过程-导致字体图标缺失"}},[a._v("#")]),a._v(" webpack打包过程，导致字体图标缺失")]),a._v(" "),t("p",[a._v("http://blog.csdn.net/xiaoermingn/article/details/53543001")]),a._v(" "),t("h2",{attrs:{id:"div需要添加失去焦点触发事件问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#div需要添加失去焦点触发事件问题"}},[a._v("#")]),a._v(" div需要添加失去焦点触发事件问题")]),a._v(" "),t("p",[a._v("点击内部元素也触发了blur事件解决方案（vue），可以在vue里面通过jquery为document全局设定click事件对想要收起的元素进行隐藏，然后在vue内容对需要排除在click事件之外的元素添加带有stop(阻止冒泡)的方法")]),a._v(" "),t("h2",{attrs:{id:"全局函数注册"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局函数注册"}},[a._v("#")]),a._v(" 全局函数注册")]),a._v(" "),t("p",[a._v("https://segmentfault.com/q/1010000007031477")]),a._v(" "),t("h2",{attrs:{id:"vue项目使用sass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue项目使用sass"}},[a._v("#")]),a._v(" vue项目使用sass")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("安装：\n npm install node-sass --save-dev\n npm install sass-loader --save-dev\n")])])]),t("h2",{attrs:{id:"el-input-number-change"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#el-input-number-change"}},[a._v("#")]),a._v(" el-input-number @change")]),a._v(" "),t("p",[a._v("需要注意的是：@change事件中去获取v-model的值  获取到的是改变前的值")]),a._v(" "),t("h2",{attrs:{id:"props传递拿不到数据问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#props传递拿不到数据问题"}},[a._v("#")]),a._v(" props传递拿不到数据问题")]),a._v(" "),t("p",[a._v("有的时候，我们通过组件传值的方式向子组件传递参数，这时候在各大生命周期里面，以及计算属性中获取值可能出现undefined的情况，因为此时数据还没传递进来，可以在组件上加v-if进行解决")]),a._v(" "),t("h2",{attrs:{id:"通过对象的形式控制元素背景图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#通过对象的形式控制元素背景图"}},[a._v("#")]),a._v(" 通过对象的形式控制元素背景图")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("元素上通过:style=\"\"绑定一个对象\n对象内部书写方式： backgroundImage: `url('${defaultPortrait}')`\n")])])]),t("h2",{attrs:{id:"watch立即执行的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#watch立即执行的问题"}},[a._v("#")]),a._v(" watch立即执行的问题：")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("handler可以是一个具名函数，也可以是一个匿名函数，根据场景决定\n匿名函数场景：\nwatch: {\n    currentView: {\n      handler(val) {\n        if (val === 'childrenAds') {\n          this.init()\n        }\n      },\n      immediate: true\n    }\n}\n\n")])])]),t("h2",{attrs:{id:"组件按需加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#组件按需加载"}},[a._v("#")]),a._v(" 组件按需加载")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v(" childrenAds: resolve => { require(['./childrenAds'], resolve) }\n")])])]),t("h2",{attrs:{id:"vue动态修改路由参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue动态修改路由参数"}},[a._v("#")]),a._v(" vue动态修改路由参数")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("import merge from 'webpack-merge'；\n \n修改原有参数        \nthis.$router.push({\n    query:merge(this.$route.query,{'maxPrice':'630'})\n})\n \n新增一个参数：\nthis.$router.push({\n    query:merge(this.$route.query,{'addParams':'我是新增的一个参数，哈哈哈哈'})\n})\n \n替换所有参数：\n this.$router.push({\n    query:merge({},{'maxPrice':'630'})\n})\n")])])]),t("h2",{attrs:{id:"vue-lazyload-特殊情况下改变全局配置的error图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue-lazyload-特殊情况下改变全局配置的error图"}},[a._v("#")]),a._v(" vue-lazyload 特殊情况下改变全局配置的error图")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v('<img v-lazy="{src: item.baby.head_img, error: defaultBabyHead}">\n')])])]),t("ul",[t("li",[a._v("注意：其中用到的***defaultBabyHead***需要在data里面注册，否则无效\n关于vue-lazyload其他内容见"),t("a",{attrs:{href:"https://github.com/hilongjw/vue-lazyload/",target:"_blank",rel:"noopener noreferrer"}},[a._v("：gihub"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);